{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let CoachService = /*#__PURE__*/(() => {\n  class CoachService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.heroesUrl = 'api/heroes'; // URL to web api\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /** GET heroes from the server */\n\n\n    getCoaches() {\n      return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getCoaches', [])));\n    }\n    /** GET hero by id. Return `undefined` when id not found */\n\n\n    getCoachNo404(id) {\n      const url = `${this.heroesUrl}/?id=${id}`;\n      return this.http.get(url).pipe(map(heroes => heroes[0]), // returns a {0|1} element array\n      tap(h => {\n        const outcome = h ? 'fetched' : 'did not find';\n        this.log(`${outcome} hero id=${id}`);\n      }), catchError(this.handleError(`getCoach id=${id}`)));\n    }\n    /** GET hero by id. Will 404 if id not found */\n\n\n    getCoach(id) {\n      const url = `${this.heroesUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getCoach id=${id}`)));\n    }\n    /* GET heroes whose name contains search term */\n\n\n    searchCoaches(term) {\n      if (!term.trim()) {\n        // if not search term, return empty hero array.\n        return of([]);\n      }\n\n      return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchCoaches', [])));\n    } //////// Save methods //////////\n\n    /** POST: add a new hero to the server */\n\n\n    addCoach(hero) {\n      return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newCoach => this.log(`added hero w/ id=${newCoach.id}`)), catchError(this.handleError('addCoach')));\n    }\n    /** DELETE: delete the hero from the server */\n\n\n    deleteCoach(id) {\n      const url = `${this.heroesUrl}/${id}`;\n      return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteCoach')));\n    }\n    /** PUT: update the hero on the server */\n\n\n    updateCoach(hero) {\n      return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateCoach')));\n    }\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     *\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a CoachService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`CoachService: ${message}`);\n    }\n\n  }\n\n  CoachService.ɵfac = function CoachService_Factory(t) {\n    return new (t || CoachService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  CoachService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CoachService,\n    factory: CoachService.ɵfac,\n    providedIn: 'root'\n  });\n  return CoachService;\n})();","map":null,"metadata":{},"sourceType":"module"}